CREATE TABLE person ( 
                      id BIGSERIAL NOT NULL PRIMARY KEY,
                      first_name VARCHAR(50) NOT NULL,
                      last_name  VARCHAR(50) NOT NULL,
                      gender VARCHAR(8) NOT NULL,
                      date_of_birth DATE NOT NULL,
                      email VARCHAR(150)
                      );


INSERT INTO person (first_name, last_name, gender, date_of_birth, email)
        VALUES ('Anne', 'Jakes', FEMALE', date '2000-01-23' );


SELECT * FROM person;




PostgreSQL is a powerful open-source relational database management system. 

Below are some essential PostgreSQL commands:

1.
psql -U <username> -d <database_name> -h <host> -p <port>
OR 
\c <database_name>


2. Creating a new database:
CREATE DATABASE database_name;

3.Dropping a database
   DROP DATABASE database_name;

4. Select all data from database:
   SELECT * FROM <database>;

5. Selecting first_name from a table:
    SELECT first_name FROM <name of table>;

6. select email from table:
   SELECT email FROM <name of table>;



In PostgreSQL, the ORDER BY keyword is used in a SELECT statement to sort the result set based on one or more columns. 
It allows you to specify the order in which the rows should be returned.

-- Sorting by a single column in ascending order
SELECT employee_id, first_name, last_name, salary
FROM employees
ORDER BY salary ASC;

-- Sorting by a single column in descending order
SELECT employee_id, first_name, last_name, salary
FROM employees
ORDER BY salary DESC;


SELECT * FROM <name of table> ORDER BY first_name;
SELECT * FROM <name of table> ORDER BY last_name;
SELECT * FROM <name of table> ORDER BY gender;
SELECT * FROM <name of table> ORDER BY country_of_birth;

ASC --- ASCENDING
DESC --- DESCENDING

SELECT * FROM <name of table> ORDER BY first_name DESC;
SELECT * FROM <name of table> ORDER BY last_name DESC;
SELECT * FROM <name of table> ORDER BY gender DESC;
SELECT * FROM <name of table> ORDER BY country_of_birth DESC;


In PostgreSQL, the WHERE clause is used in a SELECT, UPDATE, or DELETE statement to filter the rows returned by a query or the rows 
that are affected by an update or delete operation. It allows you to specify a condition that must be met for a row to be included 
in the result set or be updated/deleted.

 SELECT * FROM person WHERE gender = 'Male' AND ( country_of_birth = 'Albania' OR country_of_birth = 'China');




In PostgreSQL (and SQL in general), comparison operators are used to perform comparisons between two expressions or values and 
return a boolean result (True or False) based on the comparison's outcome. These operators are commonly used in the WHERE clause of 
SELECT, UPDATE, and DELETE statements to filter rows based on certain conditions.

Here are some of the most commonly used comparison operators in PostgreSQL:

1. Equality (=): Checks if two values are equal.

SELECT * FROM table_name WHERE column_name = value;

2. Inequality (<> or !=): Checks if two values are not equal.

   SELECT * FROM table_name WHERE column_name <> value;

3. Greater Than (>): Checks if one value is greater than another.

   SELECT * FROM table_name WHERE column_name > value;

4. Less Than (<): Checks if one value is less than another.

  SELECT * FROM table_name WHERE column_name < value;

5. Greater Than or Equal To (>=): Checks if one value is greater than or equal to another.

   SELECT * FROM table_name WHERE column_name >= value;

6. Less Than or Equal To (<=): Checks if one value is less than or equal to another.
   
   SELECT * FROM table_name WHERE column_name <= value;

7. IS NULL: Checks if a value is NULL (i.e., it has no value).
   SELECT * FROM table_name WHERE column_name IS NULL;



   
In PostgreSQL, the LIMIT and OFFSET clauses are used to control the number of rows returned by a query. 
They are often used together to implement pagination, allowing you to retrieve a subset of rows from a result set.

1. LIMIT Clause:
The LIMIT clause specifies the maximum number of rows to be returned by a query. 
It is generally used at the end of a SELECT statement. 
The syntax is as follows:

SELECT column1, column2, ...
FROM table_name
LIMIT number_of_rows;

SELECT product_name, unit_price FROM products LIMIT 10;

SELECT * FROM person LIMIT 20;

2. OFFSET Clause:
The OFFSET clause is used to skip a specified number of rows from the beginning of the result set. It is often combined with the 
LIMIT clause to implement pagination. 
The syntax is as follows:

SELECT column1, column2, ...
FROM table_name
LIMIT number_of_rows
OFFSET offset_value;

SELECT product_name, unit_price
FROM products
LIMIT 10
OFFSET 20;

SELECT product_name, unit_price FROM products ORDER BY unit_price DESC LIMIT 5 OFFSET 10;



test=# SELECT * FROM person OFFSET 20 LIMIT 20;
 id | first_name | last_name  |            email             |   gender   | date_of_birth |   country_of_birth
----+------------+------------+------------------------------+------------+---------------+-----------------------
 21 | Clemmie    | Rowbotham  | crowbothamk@theatlantic.com  | Male       | 2023-04-04    | Russia
 22 | Cyrill     | Ielden     | cieldenl@wufoo.com           | Male       | 2023-01-15    | Poland
 23 | Cort       | Jouen      | cjouenm@cdc.gov              | Bigender   | 2022-08-31    | Brazil
 24 | Drew       | Kaemena    | dkaemenan@blinklist.com      | Male       | 2023-04-21    | South Africa
 25 | Boris      | Balint     | bbalinto@opensource.org      | Male       | 2023-04-23    | Indonesia
 26 | Bogey      | Hobson     | bhobsonp@stanford.edu        | Male       | 2022-07-31    | Myanmar
 27 | Halette    | Chattaway  | hchattawayq@npr.org          | Female     | 2022-10-18    | China
 28 | Madalena   | Biggen     | mbiggenr@state.tx.us         | Female     | 2022-10-16    | Brazil
 29 | Jon        | Kettlewell | jkettlewells@theguardian.com | Polygender | 2022-10-31    | Portugal
 30 | Greer      | Rihosek    | grihosekt@taobao.com         | Female     | 2023-01-19    | Albania
 31 | Korrie     | Versey     | kverseyu@cyberchimps.com     | Female     | 2023-05-26    | United States
 32 | Steffie    | Leftley    | sleftleyv@huffingtonpost.com | Female     | 2022-09-30    | Poland
 33 | Luella     | Boost      | lboostw@cyberchimps.com      | Female     | 2023-02-08    | Iran
 34 | Cherilynn  | Freear     | cfreearx@va.gov              | Female     | 2023-02-20    | Tanzania
 35 | Egon       | Stoate     | estoatey@toplist.cz          | Male       | 2022-11-20    | Venezuela
 36 | Allys      | Asch       | aaschz@usa.gov               | Female     | 2023-01-25    | Tajikistan
 37 | Manda      | Raiston    | mraiston10@uol.com.br        | Non-binary | 2023-03-03    | Palestinian Territory
 38 | Axe        | Cogin      | acogin11@cocolog-nifty.com   | Male       | 2022-09-06    | Philippines
 39 | Darby      | Scutter    | dscutter12@nhs.uk            | Agender    | 2023-06-19    | Indonesia
 40 | Oby        | Craw       | ocraw13@globo.com            | Male       | 2022-10-25    | Macedonia
(20 rows)


test=# SELECT * FROM person OFFSET 20 FETCH FIRST 5 ROW ONLY;
 id | first_name | last_name |            email            |  gender  | date_of_birth | country_of_birth
----+------------+-----------+-----------------------------+----------+---------------+------------------
 21 | Clemmie    | Rowbotham | crowbothamk@theatlantic.com | Male     | 2023-04-04    | Russia
 22 | Cyrill     | Ielden    | cieldenl@wufoo.com          | Male     | 2023-01-15    | Poland
 23 | Cort       | Jouen     | cjouenm@cdc.gov             | Bigender | 2022-08-31    | Brazil
 24 | Drew       | Kaemena   | dkaemenan@blinklist.com     | Male     | 2023-04-21    | South Africa
 25 | Boris      | Balint    | bbalinto@opensource.org     | Male     | 2023-04-23    | Indonesia
(5 rows)



In PostgreSQL, the IN operator is used in the WHERE clause to check if a value matches any value in a specified list. 
It allows you to simplify queries when you want to compare a column against multiple values. The IN operator returns true if the 
value being tested matches any of the values in the list.

Example:

Let's assume we have a table called "employees" with columns: "employee_id", "first_name", and "department".

-- Query to retrieve employees from the 'Sales' and 'Marketing' departments
SELECT employee_id, first_name FROM employees WHERE department IN ('Sales', 'Marketing');

